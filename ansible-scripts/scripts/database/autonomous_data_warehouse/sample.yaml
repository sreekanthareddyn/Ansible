---
# Copyright (c) 2018, Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Autonomous Data Warehouse usage example
  hosts: localhost
  connection: local
  vars:
    #########################################
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    # Please refer to module documentation for sample values for 
    # variables
    #########################################
    compartment_ocid: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"
    cpu_core_count: "{{ lookup('env', 'SAMPLE_CPU_CORE_COUNT') }}" # sample value, cpu_core_count: 1
    display_name: "{{ lookup('env', 'SAMPLE_DBW_DISPLAY_NAME') }}" # sample value, display_name: 'sample_autonomous_db_warehouse'
    admin_password: "{{ lookup('env', 'SAMPLE_ADMIN_PASSWORD') }}" # sample value, admin_password: 'BEstr0ng_#11'
    db_name: "{{ lookup('env', 'SAMPLE_DBW_NAME') }}" # sample value, db_name: 'autodbw' (Maximum 14 alphanumeric characters)
    data_storage_size_in_tbs: "{{ lookup('env', 'SAMPLE_DATA_STORAGE_SIZE_IN_TBS') }}" # sample value, data_storage_size_in_tbs: 1
    license_model: "{{ lookup('env', 'SAMPLE_LICENSE_MODEL') }}" #sample value, license_model: 'LICENSE_INCLUDED'

  tasks:
    - name: Check pre-requisites
      fail:
        msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
      when: item not in ansible_env
      with_items:
        - "SAMPLE_COMPARTMENT_OCID"
        - "SAMPLE_CPU_CORE_COUNT"
        - "SAMPLE_DBW_DISPLAY_NAME"
        - "SAMPLE_ADMIN_PASSWORD"
        - "SAMPLE_DBW_NAME"
        - "SAMPLE_DATA_STORAGE_SIZE_IN_TBS"
        - "SAMPLE_LICENSE_MODEL"

    - name: Create a new Autonomous Data Warehouse
      oci_autonomous_data_warehouse:
          compartment_id: "{{ compartment_ocid }}"
          cpu_core_count: "{{ cpu_core_count }}"
          display_name: "{{ display_name }}"
          admin_password: "{{ admin_password }}"
          db_name: "{{ db_name }}"
          data_storage_size_in_tbs: "{{ data_storage_size_in_tbs }}"
          license_model: "{{ license_model }}"
          state: 'present'
      register: result

    - set_fact:
         autonomous_data_warehouse_id: "{{ result.autonomous_data_warehouse.id }}"
    - assert:
        that:  
          - result.autonomous_data_warehouse.lifecycle_state == "AVAILABLE"

# List Autonomous Data Warehouses filtered by Display Name
    - name: List All Autonomous Data Warehouses in a compartment, filtered by Display Name
      oci_autonomous_data_warehouse_facts:
         compartment_id: "{{ compartment_ocid }}"
         display_name: '{{ display_name }}'
      register: result

# Get a specific Autonomous Data Warehouse
    - name: Get a specific Autonomous Data Warehouse's facts
      oci_autonomous_data_warehouse_facts:
         autonomous_data_warehouse_id: "{{ autonomous_data_warehouse_id }}"
      register: result
    - debug:
          msg: "{{result}}"


  # Stop Autonomous Data Warehouse 
    - name: Stop an Autonomous Data Warehouse
      oci_autonomous_data_warehouse:
         autonomous_data_warehouse_id: "{{ autonomous_data_warehouse_id }}"
         state: 'stop'
      register: result

    - name : Assert that specified Autonomous Data Warehouse is stopped
      assert:
         that:
            - result.autonomous_data_warehouse.lifecycle_state == 'STOPPED'

# Start Autonomous Data Warehouse 
    - name: Start an Autonomous Data Warehouse
      oci_autonomous_data_warehouse:
         autonomous_data_warehouse_id: "{{ autonomous_data_warehouse_id }}"
         state: 'start'
      register: result

    - name : Assert that specified Autonomous Data Warehouse is started and available
      assert:
         that:
            - result.autonomous_data_warehouse.lifecycle_state == 'AVAILABLE'

    - import_tasks: teardown.yaml
