---
# Copyright (c) 2018, Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Delete old objects from all the buckets
  hosts: localhost
  vars:
    # common vars
    sample_bucket_name: "sample_bucket"
    sample_object_name: "sample_object"

    #########################################
    # Tenancy specific configuration
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable 
    #########################################
    compartment_id: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"
    namespace_name: "{{ lookup('env', 'SAMPLE_OBJECT_NS_NAME') }}"

  tasks:
    # Create a sample bucket and put sample objects in the sample bucket.
    - import_tasks: setup.yaml

    - name: Get current date-time
      set_fact:
        current_date_time: "{{ansible_date_time.iso8601_micro }}"

    - name: Get all the buckets in the namespace
      oci_bucket_facts:
        namespace_name: "{{ namespace_name }}"
        compartment_id: "{{ compartment_id }}"
      register: ocibuckets

    - name: Get all objects from all the buckets
      oci_object_facts:
        namespace: "{{ namespace_name }}"
        bucket: "{{ item.name }}"
      with_items: "{{ ocibuckets.buckets }}"
      register: output

#     The above variable, output, contains key "results" which is a list of result of individual invocation through
#     with_items. Each result has "item" key that has the bucket's details and the "objects" key that contains all the
#     objects within that bucket:
#      output:
#      {
#       results:
#        [
#          {
#            item:{},
#            objects: []
#          }
#        ]
#      }

    - name: Task to DELETE all objects created within last ONE day
      oci_object:
        namespace: "{{ namespace_name }}"
        bucket: "{{ item.0.item.name }}"
        object: "{{ item.1.name }}"
        state: absent
      when: ( (current_date_time[:19] | to_datetime('%Y-%m-%dT%H:%M:%S')) - (item.1.time_created[:19] | to_datetime('%Y-%m-%dT%H:%M:%S')) ).days < 1
      with_subelements:
        - "{{ output.results }}"
        - objects

    # Delete sample bucket.
    - import_tasks: cleanup.yaml
